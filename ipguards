#!/usr/bin/env python
import sys, os, pwd, time
import getopt, termios
# module sha is deprecated in new python, but it's hard to be compatible with
# hmac module with sha and hashlib and keep the same code...
import binascii, hmac, sha, random
import simplejson, anydbm
import socket, threading, logging
from SocketServer import UnixStreamServer, ThreadingMixIn, StreamRequestHandler

DBMFILE = '/tmp/ipguards.db'
SOCKFILE = '/tmp/ipguards.sock'
SOCKPWD= pwd.getpwnam('apache')

def parse_request(line):
	line = line.strip()
	try: cmd,data = line.split(' ', 1)
	except: cmd,data = line,''
	data = simplejson.loads(data)
	return cmd,data

def randhex(num_bytes):
	return ''.join([random.choice('0123456789abcdef') for i in xrange(num_bytes*2)])

def sec_input(prompt=''):
	s = None
	fd = sys.stdin.fileno()
	old = termios.tcgetattr(fd)
	new = termios.tcgetattr(fd)
	new[3] = new[3] & ~termios.ECHO
	try:
		termios.tcsetattr(fd, termios.TCSADRAIN, new)
		#flush_input(fd)
		s = raw_input(prompt)
	finally:
		termios.tcsetattr(fd, termios.TCSADRAIN, old)
	print
	return s

def add_rule(ipaddr):
	socket.inet_aton(ipaddr) # validate the ipaddr
	del_rule(ipaddr) # delete first to avoid duplication
	cmdline = '/sbin/iptables -A ipguards_input -s %s -j ACCEPT' % ipaddr
	return os.system(cmdline)

def del_rule(ipaddr):
	socket.inet_aton(ipaddr) # validate the ipaddr
	cmdline = '/sbin/iptables -D ipguards_input -s %s -j ACCEPT' % ipaddr
	return os.system(cmdline)

class IPGuardHandler(StreamRequestHandler):
	def handle_grant(self, req):
		m = UserManager(db)
		if not m.authenticate(req['username'], req['password']):
			res = {'msg':'authentication failure'}
			self.wfile.write('ERROR %s\n' % simplejson.dumps(res))
			logging.info('returns: ERROR %s' % simplejson.dumps(res))
			return False

		res = {'ipaddr':req['ipaddr'], 'expire':long(time.time()) + req['ttl']}
		self.server.db['%s@%s' % (req['username'], req['ipaddr'])] = str(res['expire'])
		logging.info('db[%s@%s] <= %s' % (req['username'], req['ipaddr'], res['expire']))
		add_rule(req['ipaddr'])

		self.wfile.write('OK %s\n' % simplejson.dumps(res))
		logging.info('returns: OK %s' % simplejson.dumps(res))
		return True

	def handle(self):
		self.server.lock.acquire()
		try:
			try:
				cmd,req = parse_request(self.rfile.readline())
				logging.info('get request %s: %s' % (cmd, req))
				if cmd == 'GRANT':
					self.handle_grant(req)
				else:
					res = {'msg':'invalid command'}
					self.wfile.write('ERROR %s\n' % simplejson.dumps(res))
			except:
				logging.exception('general handle exception')
				self.wfile.write('ERROR\n')
		finally:
			self.wfile.flush()
			self.server.lock.release()

class IPGuardServer(ThreadingMixIn, UnixStreamServer):
	timeout = 60

	def __init__(self, server_address, RequestHandlerClass):
		self.lock = threading.Lock()
		self.db = anydbm.open(DBMFILE, 'c', 0600)
		UnixStreamServer.__init__(self, server_address, RequestHandlerClass)

	def handle_timeout(self):
		self.lock.acquire()
		try:
			logging.info('handle_timeout')
			now = long(time.time())
			for key in self.db.keys():
				if '@' in key:
					data = simplejson.loads(db[key])
					if data['expire'] - now <= 0:
						user,ipaddr = key.split('@', 1)
						logging.info('expire %s@%s' % (user, ipaddr))
						del_rule(ipaddr)
						del db[key]
		finally:
			self.lock.release()

def daemon(db, action):
	# TODO: complain and exit, if ipguards_input chain doesn't exist
	try: os.unlink(SOCKFILE)
	except: pass

	try:
		server = IPGuardServer(SOCKFILE, IPGuardHandler)
		os.chown(SOCKFILE, SOCKPWD.pw_uid, SOCKPWD.pw_gid)
		os.chmod(SOCKFILE, 0600)
		server.serve_forever()
	finally:
		try: os.unlink(SOCKFILE)
		except: pass

class UserManager(object):
	def __init__(self, db):
		self.db = db

	def list(self):
		D = {}
		nlen = 0
		for key in self.db.iterkeys():
			if not key.startswith('user-'): continue
			data = simplejson.loads(self.db[key])
			D[key[5:]] = data
			nlen = max(nlen, len(key)-5)
		L = D.keys()
		L.sort()
		for username in L:
			print '%*s %s' % (nlen, username, data) #data['method'])

	def add(self, username, method, method_data):
		key = 'user-%s' % username
		if key in self.db:
			print >>sys.stderr, 'Error: user already exists'
			return False

		data = {'method':method}
		data.update(method_data)
		self.db[key] = simplejson.dumps(data)
		return True

	def modify(self, username, method, method_data):
		key = 'user-%s' % username
		if key not in self.db:
			print >>sys.stderr, 'Error: user does not exist'
			return False

		data = {'method':method}
		data.update(method_data)
		self.db[key] = simplejson.dumps(data)
		return True

	def delete(self, username):
		del self.db['user-%s' % username]

	def passwd(self, username):
		key = 'user-%s' % username
		if key not in self.db:
			print >>sys.stderr, 'Error: user does not exist'
			return False

		data = simplejson.loads(self.db[key])
		if data['method'] != 'static':
			print >>sys.stderr, 'Error: authenticate method is not static'
			return False

		while True:
			passwd1 = sec_input('Password: ')
			passwd2 = sec_input('Confirm: ')
			if passwd1 == passwd2: break
			print >>sys.stderr, 'Password mismatch'

		data['times'] = 100
		data['salt'] = randhex(8)
		data['hash'] = self.static_hash(data, passwd1)
		self.db[key] = simplejson.dumps(data)
		return True

	def static_hash(self, data, password):
		h = password
		for i in xrange(max(data.get('times',1), 1)):
			h = hmac.new(data['salt'], h, sha).digest()
		return binascii.b2a_hex(h)

	def authenticate(self, username, password):
		key = 'user-%s' % username
		if key not in self.db: return False
		data = simplejson.loads(self.db[key])
		if data['method'] == 'static':
			return self.static_hash(data, password) == data['hash']
		elif data['method'] == 'totp':
			return False # TODO
		return False

def userman(db, action, args):
	method = 'static'
	method_data = {'pin':'', 'step':30}
	optlist,args = getopt.getopt(args, 'm:k:s:p:')
	for opt,value in optlist:
		if opt == '-m': method = value
		elif opt == '-k': method_data['key'] = value
		elif opt == '-s': method_data['step'] = value
		elif opt == '-p': method_data['pin'] = value

	username = None
	if action != 'users': username = args[0]

	if action in ('useradd','usermod'):
		if method == 'static':
			for k in ('pin','key','step'):
				if k in method_data: del method_data[k]
		elif method == 'totp':
			if 'key' not in method_data:
				method_data['key'] = randhex(16)
				print 'TOTP Random Key:', method_data['key']
		else:
			print >>sys.stderr, 'Error: invalid method'
			return False

	m = UserManager(db)
	if action == 'users':
		return m.list()
	elif action == 'useradd':
		return m.add(username, method, method_data)
	elif action == 'usermod':
		return m.modify(username, method, method_data)
	elif action == 'userdel':
		return m.delete(username)
	elif action == 'passwd':
		return m.passwd(username)
	elif action == 'auth':
		password = sec_input('Password: ')
		print m.authenticate(username, password)
		return True
	else:
		print >>sys.stderr, 'Error: invalid action'
		return False

if __name__ == '__main__':
	handler = logging.StreamHandler()
	formatter = logging.Formatter('%(asctime)s pid=%(process)d %(levelname)s %(message)s')
	handler.setFormatter(formatter)
	logger = logging.getLogger(None)
	logger.addHandler(handler)
	logger.setLevel(logging.DEBUG)

	if len(sys.argv) < 2:
		print 'Usage:'
		print '\tipguards start|stop|restart|debug'
		print '\tipguards users [-v]'
		print '\tipguards useradd [-m static|totp] [-k <totp_hexkey>] [-s <totp_step>] [-p <totp_pin>] <username>'
		print '\tipguards usermod [-m static|totp] [-k <totp_hexkey>] [-s <totp_step>] [-p <totp_pin>] <username>'
		print '\tipguards userdel <username>'
		print '\tipguards passwd <username>'
		sys.exit(1)

	action = sys.argv[1]
	db = anydbm.open(DBMFILE, 'c', 0600)

	if action == 'debug':
		daemon(db, action)
	elif action.startswith('user') or action == 'passwd' or action == 'auth':
		userman(db, action, sys.argv[2:])
	elif action == 'test':
		m = UserManager(db)
		print m.static_hash({'salt':'salt', 'times':1}, 'password')
		print m.static_hash({'salt':'salt', 'times':2}, 'password')
